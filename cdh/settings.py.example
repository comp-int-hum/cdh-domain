"""
***Comments specific to the CDH start with "CDH NOTE"***

Django settings for the cdh-domain project.
"""
from pathlib import Path
import os

# CDH NOTE: These dictionaries are where you can add new apps.  The key is simply the app's
#           module name (usually, just the subdirectory within this cdh-domain repository),
#           and the value is its "human-friendly" title.  Private apps only show up for users
#           who are logged in.
BUILTIN_PAGES = {
    "about" : "About",
    "people" : "People",
    "research" : "Research",
    #"calendar" : "Calendar",
    "wiki" : "Wiki",
}
APPS = {
    "primary_sources" : "Primary sources",
    "machine_learning" : "Machine learning",
    "annotation" : "Annotation",
    "topic_modeling" : "Topic modeling",
}

EMAIL_WHITELIST = []

# CDH NOTE: For development you can follow the README instructions for running the needed backends locally,
#           and set these to True, otherwise the framework will use hacks to simulate the behavior
#           (but it may not be identical to the production site).  For a full production setup, the
#           connection information (servers, usernames, passwords, etc) will need to be specified in the
#           appropriate sections below.
USE_LDAP = False
USE_CELERY = False
USE_POSTGRES = False
USE_JENA = False
USE_TORCHSERVE = False

# CDH NOTE: These should be fine for development, but for deployment would need to be changed to match
#           the server the framework runs on.
HOSTNAME = "localhost"
IP = "127.0.0.1"
PORT = 8080

# CDH NOTE: To perform two-stage account creation the framework needs the ability to send emails.  The
#           development default is to not send emails, just write them to the console, which allows you
#           to test functionality etc.  To enable actual emails, comment the following line, uncomment
#           the rest starting with "EMAIL", and edit the values as necessary (they are correct for sending
#           emails from the CDH account, except for the password, which should only be filled in on the
#           production server)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
# EMAIL_HOST_USER = "jhu.digital.humanities"
# EMAIL_HOST_PASSWORD = "CHANGE_ME"
# EMAIL_USE_TLS = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# CDH NOTE: This directory is where all significant data not managed by Postgres or Jena will be stored.
#           By default, for development, it's just set to the "data" subdirectory within the cdh-domain
#           project itself, but in production it should be set to something more appropriate, with lots
#           of free space.  Note that it will be created if it doesn't exist yet.
DATA_DIR = BASE_DIR / "cdh_site_data"
STATIC_ROOT = DATA_DIR / "static"
MEDIA_ROOT = DATA_DIR / "media"
TEMP_ROOT = DATA_DIR / "temp"
MATERIALS_ROOT = DATA_DIR / "materials"
MODELS_ROOT = DATA_DIR / "models"
for path in [DATA_DIR, STATIC_ROOT, MEDIA_ROOT, TEMP_ROOT, MATERIALS_ROOT, MODELS_ROOT]:
    if not path.exists():
        path.mkdir()

# CDH NOTE: We don't impose upload limits, because it's expected that people will upload datasets.
FILE_UPLOAD_MAX_MEMORY_SIZE = 262144000
DATA_UPLOAD_MAX_MEMORY_SIZE = None

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hqb2mp^(%q&i985hk3h+byeck!as4h@6@v+2ap0wqpw^w6_zl&'

# CDH NOTE: We turn this on for development, but heed the warning in other situations!
# SECURITY WARNING: don't run with debug turned on in production!

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    "loggers" : {
        'django': {
            'handlers': ['console'],
            'propagate': False,
        }
    }
}

ALLOWED_HOSTS = [HOSTNAME, IP]

# CDH NOTE: We assume that, unless running on localhost, you will be using a combination
#           of nginx and SSL certificates (i.e. using https, and with a proxy setting header
#           information).  In other words, don't worry about this unless you're trying to
#           deploy the framework/changing the "HOSTNAME" setting.
proto = "http" if HOSTNAME == "localhost" else "https"
PROTO = proto
CSRF_TRUSTED_ORIGINS = ["{}://{}".format(proto, HOSTNAME)]
USE_X_FORWARDED_HOST = HOSTNAME != "localhost"
DEBUG = True
INTERNAL_IPS = [
    "127.0.0.1"
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.humanize.apps.HumanizeConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_nyt.apps.DjangoNytConfig',
    'debug_toolbar',
    'admin_auto_filters',
    'mptt',
    'sekizai',
    'wiki.apps.WikiConfig',
    'wiki.plugins.macros.apps.MacrosConfig',
] + (
    ['django.contrib.staticfiles'] if HOSTNAME == "localhost" else []
) + [
    'cdh',    
    'rest_framework',
    'django_extensions',
    'guardian',
    'django_registration',
    'djangobower',
    'schedule',
] + [k for k in APPS.keys() if k not in ["wiki"]] + ["turkle"]

SITE_ID = 1
X_FRAME_OPTIONS = "sameorigin"

# CDH NOTE: We use a slight customization of the default User model than what Django provides.
AUTH_USER_MODEL = "cdh.User"
ACCOUNT_ACTIVATION_DAYS = 1
WIKI_ACCOUNT_HANDLING = False
WIKI_ACCOUNT_SIGNUP_ALLOWED = False
ANONYMOUS = True

TURKLE_TEMPLATE_LIMIT = 1024

USE_DEPRECATED_PYTZ = True

# CDH NOTE: Edit to match your circumstances (the default will work with
#           the development process in the README file).
if USE_CELERY:
    CELERY_BROKER_URL = "redis://localhost:6379"
    CELERY_RESULT_BACKEND = "redis://localhost:6379"
    CELERY_ACCEPT_CONTENT = ['application/json']
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_TIMEZONE = "UTC"
    # CELERY_BROKER_USE_SSL = {    
    #   'keyfile': '/var/ssl/private/worker-key.pem',
    #   'certfile': '/var/ssl/amqp-server-cert.pem',
    #   'ca_certs': '/var/ssl/myca.pem',
    #   'cert_reqs': ssl.CERT_REQUIRED
    # }


# CDH NOTE: Edit to match your circumstances (the default will work with
#           the development process in the README file).
TORCHSERVE_INFERENCE_ADDRESS = "http://localhost:27080"
TORCHSERVE_MANAGEMENT_ADDRESS = "http://localhost:27081"
TORCHSERVE_METRICS_ADDRESS = "http://localhost:27082"
TORCHSERVE_GRPC_INFERENCE_ADDRESS = "http://localhost:27070"
TORCHSERVE_GRPC_MANAGEMENT_ADDRESS = "http://localhost:27071"


# CDH NOTE: Edit to match your circumstances (the default will work with
#           the development process in the README file).
if USE_JENA:
    JENA_HOST = "localhost"
    JENA_PORT = 3030
    JENA_USER = "admin"
    JENA_PASSWORD = "CHANGE_ME"

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

X_FRAME_OPTIONS = "SAMEORIGIN"

ROOT_URLCONF = 'cdh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates/"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cdh.context_processors.app_directory',
                #'django.contrib.auth.context_processors.auth',
                #'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                #'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                #'django.contrib.messages.context_processors.messages',
                "sekizai.context_processors.sekizai",
            ],
        },
    },
]

WSGI_APPLICATION = 'cdh.wsgi.application'

AUTHENTICATION_BACKENDS = (
    ["django_auth_ldap.backend.LDAPBackend"] if USE_LDAP else []
) + [
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
]

# CDH NOTE: These groups correspond to those who can use or work with the web
#           framework or workstations.
CDH_LDAP_WEB_GROUP = "cdhweb"
CDH_LDAP_WEB_ADMIN_GROUP = "cdhwebadmin"
CDH_LDAP_WORKSTATION_GROUP = "cdhworkstation"
CDH_LDAP_WORKSTATION_ADMIN_GROUP = "cdhworkstationadmin"

if USE_LDAP:
    import ldap
    from django_auth_ldap.config import LDAPSearch, PosixGroupType
    
    CDH_LDAP_ROOT_BASE_COMPONENTS = ["dc=cdh", "dc=jhu", "dc=edu"]
    CDH_LDAP_USER_BASE_COMPONENTS = [] if DEBUG else ["ou=users"]
    CDH_LDAP_GROUP_BASE_COMPONENTS = [] if DEBUG else ["ou=groups"]
    CDH_LDAP_ROOT_BASE = ",".join(CDH_LDAP_ROOT_BASE_COMPONENTS)
    CDH_LDAP_USER_BASE = ",".join(CDH_LDAP_USER_BASE_COMPONENTS + CDH_LDAP_ROOT_BASE_COMPONENTS)
    CDH_LDAP_GROUP_BASE = ",".join(CDH_LDAP_GROUP_BASE_COMPONENTS + CDH_LDAP_ROOT_BASE_COMPONENTS)

    CDH_LDAP_WEB_GROUP_DN = "cn={},{}".format(CDH_LDAP_WEB_GROUP, CDH_LDAP_GROUP_BASE)
    CDH_LDAP_WORKSTATION_GROUP_DN = "cn={},{}".format(CDH_LDAP_WORKSTATION_GROUP, CDH_LDAP_GROUP_BASE)
    CDH_LDAP_WEB_ADMIN_GROUP_DN = "cn={},{}".format(CDH_LDAP_WEB_ADMIN_GROUP, CDH_LDAP_GROUP_BASE)
    CDH_LDAP_WORKSTATION_ADMIN_GROUP_DN = "cn={},{}".format(CDH_LDAP_WORKSTATION_ADMIN_GROUP, CDH_LDAP_GROUP_BASE)
        
    # CDH NOTE:
    #
    #
    AUTH_LDAP_START_TLS = not DEBUG
    if AUTH_LDAP_START_TLS:
        ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, str(DATA_DIR / "certs" / "ldap.pem"))
        ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_DEMAND)
        ldap.set_option(ldap.OPT_X_TLS_NEWCTX, 0)
        

    # CDH NOTE:
    #
    #
    AUTH_LDAP_SERVER_URI = "ldap://localhost:1389/"
    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        CDH_LDAP_USER_BASE, ldap.SCOPE_SUBTREE, "(uid=%(user)s)"
    )
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        CDH_LDAP_GROUP_BASE, ldap.SCOPE_SUBTREE, "(objectClass=posixGroup)"
    )
    AUTH_LDAP_GROUP_TYPE = PosixGroupType()
    AUTH_LDAP_FIND_GROUP_PERMS = True
    AUTH_LDAP_MIRROR_GROUPS = True
    #AUTH_LDAP_REQUIRE_GROUP = "cn={},ou={},{}".format(CDH_WEB_GROUP, CDH_GROUP_OU, CDH_LDAP_BASE)
    AUTH_LDAP_ADMIN_CN = "admin"
    AUTH_LDAP_BIND_DN = "cn={},{}".format(AUTH_LDAP_ADMIN_CN, CDH_LDAP_ROOT_BASE)
    AUTH_LDAP_BIND_PASSWORD_FILE = DATA_DIR / "certs" / "ldapscripts.passwd"
    #with open(AUTH_LDAP_BIND_PASSWORD_FILE, "rt") as ifd:    
    #    AUTH_LDAP_BIND_PASSWORD = ifd.read()
    AUTH_LDAP_BIND_PASSWORD = "CHANGE_ME"
    AUTH_LDAP_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn", "email" : "mail"}

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    # CDH NOTE: Switch the commented databases to change between sqlite/postgres, edit
    #           as needed (the default will work with the development process described
    #           in the README file).
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST' : 'localhost',
        'NAME': 'cdh',
        'USER': 'cdh',
        'PASSWORD' : 'CHANGE_ME',
    } if USE_POSTGRES else {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATA_DIR / 'db.sqlite3',
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TEMPLATE_CONTEXT_PROCESSORS = ["django.template.context_processors.request"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_FINDERS = ['djangobower.finders.BowerFinder',
                       'django.contrib.staticfiles.finders.FileSystemFinder',
                       'django.contrib.staticfiles.finders.AppDirectoriesFinder',
                       ]
BOWER_PATH = BASE_DIR / "node_modules/bower/bin/bower"
BOWER_COMPONENTS_ROOT = DATA_DIR / 'components/'
BOWER_INSTALLED_APPS = (
    'jquery#3.6.0',
    'jquery-cookie#1.4.1',
    'jquery-ui#1.12.1',
    'bootstrap#5.1.3',
    'fullcalendar#3.8.2',
    'jquery.scrollto#1.4.5',
    'modernizr#2.6.2',
    'vega#5.22.1',
)
